package com.esspl.hemendra.mydaogenerator.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.esspl.hemendra.mydaogenerator.Test;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEST".
*/
public class TestDao extends AbstractDao<Test, Void> {

    public static final String TABLENAME = "TEST";

    /**
     * Properties of entity Test.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property C1 = new Property(0, Long.class, "c1", false, "C1");
        public final static Property C2 = new Property(1, Long.class, "c2", false, "C2");
        public final static Property C3 = new Property(2, Long.class, "c3", false, "C3");
        public final static Property C4 = new Property(3, Long.class, "c4", false, "C4");
    };


    public TestDao(DaoConfig config) {
        super(config);
    }
    
    public TestDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEST\" (" + //
                "\"C1\" INTEGER," + // 0: c1
                "\"C2\" INTEGER," + // 1: c2
                "\"C3\" INTEGER," + // 2: c3
                "\"C4\" INTEGER);"); // 3: c4
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEST\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Test entity) {
        stmt.clearBindings();
 
        Long c1 = entity.getC1();
        if (c1 != null) {
            stmt.bindLong(1, c1);
        }
 
        Long c2 = entity.getC2();
        if (c2 != null) {
            stmt.bindLong(2, c2);
        }
 
        Long c3 = entity.getC3();
        if (c3 != null) {
            stmt.bindLong(3, c3);
        }
 
        Long c4 = entity.getC4();
        if (c4 != null) {
            stmt.bindLong(4, c4);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Test readEntity(Cursor cursor, int offset) {
        Test entity = new Test( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // c1
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // c2
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // c3
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // c4
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Test entity, int offset) {
        entity.setC1(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setC2(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setC3(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setC4(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Test entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Test entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
